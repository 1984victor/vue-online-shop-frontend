name: 从零到部署：用 Vue 和 Express 实现一个迷你全栈电商应用
topics:
  - Vue
id: 092faf468f0108b393159a8456de3e15
created: "2019-10-17T00:00:00.509Z"
updated: 2019-12-22T08:08:17.483Z
categories:
  - 前端
  - Vue
  - 入门
github: "https://github.com/pftom/vue-online-shop-frontend"
splits:
  - name: 从零到部署：用 Vue 和 Express 实现一个迷你全栈电商应用（一）
    description: >-
      Vue 是尤雨溪在2014年创建的一个前端框架，目前 Github Star 数高达150K，是 Star 数最高的前端项目，并且 Vue
      有着极为活跃的社区生态以及专职团队进行维护以确保项目可以健康长久的发展。

      目前中国很多互联网公司前端程序员的招聘要求都要求程序员掌握 Vue，像滴滴、美团、饿了么等大厂也在重度使用 Vue 进行开发，并且有着像
      Element 、mpvue、iView 这样优秀的基于 Vue 开源项目存在，所以学习 Vue 是一个不错的投资，当你学会
      Vue，就可以快速开发项目，这样不仅可以接外包挣外快，而且当有了一定的项目经验，还可以在一线互联网大厂找到一份不错的工作。

      看到这里你心动了嘛？心动不如行动！而最幸运的是，本教程将会一步一步带你以实战的方式实现一个 real-life
      （真实世界中的运行的）项目，并在实战的过程中，了解 Vue 的全貌，现在就打开电脑，跟随者我的脚步，这一次彻底掌握 Vue 开发！
    start: 6f2924b
    end: aca2bb6
    id: 0b662ce
    cover: tuture-assets/cover-1.png
steps:
  - name: 快速入门
    commit: 6f2924b
    diff:
      - file: .babelrc
        display: false
      - file: .editorconfig
        display: false
      - file: .eslintignore
        display: false
      - file: .eslintrc.js
        display: false
      - file: .gitignore
      - file: .postcssrc.js
        display: false
      - file: README.md
        display: false
      - file: build/build.js
        display: false
      - file: build/check-versions.js
        display: false
      - file: build/logo.png
        display: false
      - file: build/utils.js
        display: false
      - file: build/vue-loader.conf.js
        display: false
      - file: build/webpack.base.conf.js
        display: false
      - file: build/webpack.dev.conf.js
        display: false
      - file: build/webpack.prod.conf.js
        display: false
      - file: config/dev.env.js
        display: false
      - file: config/index.js
        display: false
      - file: config/prod.env.js
        display: false
      - file: src/main.js
        display: true
        explain:
          pre: >-
            ### 初探脚手架代码


            通过 vue-cli 初始化的脚手架代码中，我们在整个教程中需要了解的就是以下五个文件：


            - `src/main.js`

            - `index.html`

            - `src/App.vue`

            - `src/router/index.js`

            - `src/components/HelloWorld.vue`


            #### src/main.js


            首先我们来看一下 `src/main.js`，这个是 Vue 应用的入口。我们通过导入 `Vue` 类、`App`
            组件、`router` 路由，再加上 `el` ，将这些参数传给 `Vue` 类，生成一个 Vue 实例。
      - file: index.html
        display: true
        explain:
          pre: |-
            #### index.html

            接着我们来看一下 `index.html` 文件，它的代码是这样的：
          post: >-
            当我们开启项目之后，Vue 所使用的构建工具 [Webpack](https://webpack.docschina.org/) 将会：


            - 根据入口文件 `src/main.js` 里面声明的 `el` 属性（`#app`），找到 `index.html` 中 id
            为`app` 的 DOM 节点

            - 把编译好的视图模板代码挂载到这个 DOM 节点下面

            - 将项目涉及的 JavaScript 和 CSS 代码以 `script` 和 `link` 的方式插入到 `index.html`
            中

            - 开启开发服务器，打开浏览器，进而浏览器将 `index.html` 渲染，我们就可以看到写好的 Vue 页面效果。
      - file: package-lock.json
      - file: package.json
        display: false
      - file: src/App.vue
        display: true
        explain:
          pre: >-
            #### src/App.vue


            `src/App.vue` 就是 Vue
            为我们提供的组件文件，使得我们可以以组件的形式来组织代码，并通过组件的组合来构建任意规模的项目，代码如下：
          post: >-
            可以看到， `App` 组件包含了三个部分的代码：


            - `template`

            - `script`

            - `style`


            其实就是对应了传统 Web "三剑客"，`HTML`、`JavaScript`、`CSS`。


            这里在 `template` 部分展示了一张 Vue 的 logo 图片，然后显示此刻渲染的路由组件：`<router-view
            />`。我们将在后面继续讲解路由，这里不懂也没有关系哦。`script` 部分，主要是导出了一个名为 `App` 的组件。`style`
            部分就是我们熟悉的 CSS 代码了。


            ::: info

            上面所讲的是比较小的组件的写法，当组件中涉及的代码较多时，我们需要把 `script` 和 `style` 抽成独立的 `.js` 和
            `.css` 文件。就像下面这样：


            ```JavaScript

            <!-- ./src/App.vue -->

            <template>
              <div id="app">
                <img src="./assets/hello.png">
                <router-view/>
              </div>
            </template>

            <script src="./app.js"></script>

            <style src="./app.css"></style>

            ```

            :::


            Vue 组件和模板语法是 Vue 的核心概念，我们在后面会以实战的形式重点讲解这些内容。
      - file: src/router/index.js
        display: true
        explain:
          pre: |-
            #### src/router/index.js

            `src/router/index.js` 文件是 Vue 为我们提供的路由文件，代码如下：
          post: >
            首先我们导出了 Vue 类，以及 Router 类，以及我们的 `HelloWorld` 组件。


            接着我们使用 `Vue.use(Router)` 告诉 Vue，我们应用接入了路由。


            在导出的路由实例中，我们通过 `routes` 数组定义了项目所有的页面，每个页面是一个类似 `{ path, name,
            component }` 的对象。


            比如初始化时生成的 `HelloWorld.vue` 就是我们的网站首页 --
            也就是打开浏览器访问到的第一个页面，因为它的路径（`path`）定义为 `/` 。此外一个页面定义还需要 `name`，它代表此页面在
            `vue-router` 中的标识符，`component` 则代表此页面渲染时的所用到的组件。



            ::: info

            **提示**


            这里我们可以看到导出 `HelloWorld` 组件时，我们在路径最前面加上了 `"@"`，那是因为我们在 `webpack`
            配置中将会 `"@"`

            映射成 `resolve('src')`，也就是我们项目目录下 `src` 文件夹的路径，最后我们的
            `'@/components/HelloWorld'` 的实际上的效果相当于取到了项目目录 `src` 文件夹里面的
            `components/HelloWorld` 组件。

            :::
      - file: src/assets/logo.png
        display: false
      - file: src/components/HelloWorld.vue
        display: true
        explain:
          pre: |-
            #### src/components/HelloWorld.vue

            最后是 `src/components/HelloWorld.vue` 文件，是脚手架代码为我们提供的一个实例组件，代码如下：
          post: >-
            可以看到，其结构大致与 `App.vue` 类似。其中也有一些不同，比如 `script` 里面的 `data` 字段，还有
            `template` 中的 `{{ }}` 语法。这个我们会在下一节进行讲解。


            当我们打开浏览器时，地址为：`http://localhost:8080/` 此时路径为 `/`，激活 `HelloWorld.vue`
            组件，所以最后我们整个项目渲染 `App.vue` 的内容，显示的结构即为：


            - 一张 Vue logo 图

            - 我们的 `HelloWorld.vue` 组件的内容


            ![App](./tuture-assets/fd30e4f820c680abbd7d34b554704551)
      - file: static/.gitkeep
        display: false
    explain:
      pre: >-
        Vue 是[尤雨溪](https://evanyou.me/)在 2014 年创建的一个前端框架，目前
        [Github](https://github.com/vuejs/vue) Star 数高达150K，是 Star 数最高的前端项目，并且
        Vue 有着极为活跃的社区生态以及专职团队进行维护以确保项目可以健康长久地发展。


        目前中国很多互联网公司前端程序员的招聘要求都要求程序员掌握 Vue，像滴滴、美团、饿了么等大厂也在重度使用 Vue 进行开发，并且有着像
        [Element](https://element.eleme.cn/#/zh-CN)
        、[mpvue](http://mpvue.com/)、[iView](http://iview.talkingdata.com/#/)
        这样优秀的基于 Vue 开源项目存在，所以学习 Vue 是一个不错的投资，当你学会
        Vue，就可以快速开发项目，这样不仅可以接外包挣外快，而且当有了一定的项目经验，还可以在一线互联网大厂找到一份不错的工作。


        看到这里你心动了嘛？心动不如行动！而最幸运的是，本教程将会一步一步带你以实战的方式实现一个迷你全栈电商网站。并在实战的过程中，了解 Vue
        的全貌，现在就打开电脑，跟随我的脚步，彻底掌握 Vue 开发！本系列教程的规划如下：


        1. **第一部分**（也就是这篇教程）：用 Vue 搭建前端项目的骨架，实现基于嵌套、动态路由的多页面跳转。

        2. **第二部分**（写作中）：用 Express 实现后端 REST API，并使用 MongoDB 进行数据存储。

        3. **第三部分**（写作中）：通过 Vue 的双向数据绑定和模板语法实现数据添加，并用 Vuex 实现前端的状态管理。

        4. **第四部分**（写作中）：用 Element UI 组件库让界面更加专业美观，并且用 Docker 和 Docker Compose
        部署我们的全栈项目。



        ::: primary

        ***记得点个赞，鼓励我们更快更好地写完剩下的教程！你也可以在评论区留言，告诉我们想要实现什么功能，我们一定会仔细考虑的哦！***

        :::



        ### 代码


        你可以在 Github
        查看完整的源码：[源码地址](https://github.com/pftom/vue-online-shop-frontend/tree/aca2bb64cbdaebb7e4a62e252bc00a439eede9a5)。


        ### 项目准备


        #### 安装依赖


        安装 Node.js，你可以去 [Node.js](https://nodejs.org/en/) 官网下载安装包，通过安装包安装会同时安装
        Node.js 包管理工具 Npm，用于便捷的管理项目依赖和下载第三方包。


        打开终端，输入如下命令测试是否安装成功：


        ```Bash

        node -v # v10.16.0

        npm -v # 6.9.0

        ```


        如果在你的终端有如上输出，那么代表你安装成功。



        ::: info

        **提示**


        通过上面安装包安装，你会安装最新的 Node 稳定版本，这可能和我的机器上的 Node
        版本不一致，但是不用担心，本教程使用到的代码语法适用于绝大多数新的或更老的 Node。

        :::


        安装 vue-cli，在绝大多数场景下，我们使用 vue-cli 来初始化我们的 vue 项目，本教程也不例外，在终端运行如下命令来安装：


        ```bash

        npm install -g vue-cli

        ```


        打开终端，输入如下命令测试是否安装成功：



        ```Bash

        vue --version # 2.9.6

        ```


        ::: info

        **提示**


        虽然 Vue 3.x 已经正式推出，但是这篇教程用的是主流、稳定的 Vue 2.x 版本。由于 Vue
        的整体思想基本没有改变，所以不影响我们的学习。在接下来的教程中，我们会迁移到 Vue 3.x，并通过讲解新老 Vue 版本的差异让你更好地理解
        Vue 的演变。

        :::


        上面两个安装步骤已经足够完成我们的教程的学习，但是我想额外推荐你一款编辑器，VSCode，你可以通过访问
        [VSCode](https://code.visualstudio.com/) 官网安装。


        在 VSCode 里面找到 Vue
        插件，可以获得[代码语法高亮以及自动格式化](https://marketplace.visualstudio.com/items?itemName=octref.vetur)非常便捷的功能，并且
        VSCode 天然对 JavaScript 的支持，会大大提高我们的开发效率，本教程所涉及项目的开发都是使用 VSCode 完成的。


        #### 初始化项目


        打开终端输入如下命令初始化我们的 Vue 项目：


        ```Bash

        vue init webpack vue-online-shop-frontend

        ```

        命令行接着会显示一些列选项让你选择，具体我们的选择如下图：


        ![](tuture-assets/142621576840065_.pic.jpg)


        ::: info

        **提示**


        其中 `Author` 字段你可以填自己的昵称，然后我们在选择了安装 `vue-router` 之后，其他的都选择了
        `no`，因为本篇教程是面向初学者的实战教程，如果引入了过多和 Vue 核心无关的概念，就会引起很多困惑，所以这里我们不配置它们

        :::


        当项目初始化成功之后，接下来通过如下命令开启项目：


        ```Bash

        # code vue-online-shop-frontend # 如果你使用了 VSCode 编辑器，可以用这行命令打开项目

        cd vue-online-shop-frontend && npm start

        ```


        接着打开浏览器，访问 `http://localhost:8080/` 查看我们初始好的项目效果。



        ::: warning

        **注意**


        如果你使用 VSCode 编辑器打开项目进行开发，在运行 `code project-name` 之前需要安装 `code`
        脚本，具体我找了一篇教程：[戳我访问](https://www.cnblogs.com/Zhangcsc/p/11362987.html)。

        :::


        ![初始化项目效果](./tuture-assets/c5019a89d14f9f9118f22b61136c02c3)
      post: |-
        ### 小结

        通过一窥 `vue-cli` 为我们初始化的项目代码，我们可以学到如下的知识：

        - Vue 通过组件来组织项目，单个组件就是我们传统的 Web "三剑客"：HTML、JavaScript、CSS。
        - Vue 通过路由来定义多个页面，并且进行页面之间的跳转。
        - 一个页面是一个组件，一个组件可以由很多组件组成，通过这种组合式的思想，我们可以编写任意复杂的项目。
  - name: 编写你的第一个 Vue 页面
    commit: 13f202a
    diff:
      - file: src/components/HelloWorld.vue
        display: false
      - file: src/components/Home.vue
        display: true
        explain:
          pre: |-
            ### 编写页面组件

            在 `src/components` 下面创建 `Home.vue` 文件，然后编写如下代码：
          post: >-
            在上面，我们创建了一个名为 `Home.vue` 的 Vue 组件，可以看到它和我们之前的 `HelloWorld.vue`
            的内容大致相仿，但是也有一些不同的地方：


            - 首先，我们暂时没有写样式（没有 `style` 部分），而是先专注于基础知识的讲解。在后续教程中，我们会使用 [Element
            UI](https://element.eleme.cn/) 组件库让我们的界面变得专业美观。

            - 其次，我们在 `script` 中引入了 `data` ，在 `template` 引入了插值语法 `{{var}}`。其中
            `data` 是声明此组件的初始化数据，而 `{{var}}` 插值语法是方便将数据渲染到视图模板中；这里我们将在 `script`
            中定义的 `data` 中的 `msg` 插值到视图模板中，最终会渲染一个 `h1` 标签，标签内容就为 `msg` 的内容。
      - file: src/router/index.js
        display: true
        explain:
          pre: >-
            ### 接入路由


            接着，我们在 `src/router/index.js` 路由中将主页路由 `/` 所绑定的组件从默认的 `HelloWorld`
            修改为刚才写好的 `Home` 组件：
          post: |-
            现在我们保存代码，打开浏览器，就会显示刚才在 `Home.vue` 里面填写的那个标题：

            ![Home.vue](./tuture-assets/edd8a53811e78bacd91ace31c3691c70)
    explain:
      pre: 下面我们来编写电商应用的首页。
  - name: 使用路由进行多页面跳转
    commit: f0206c2
    diff:
      - file: src/App.vue
        display: true
        explain:
          pre: |-
            ### 添加首页导航

            首先修改 `App.vue` ，加入三个导航链接 `router-link`，方便让用户跳转到到自己想看的页面，代码如下：
          post: |
            这里我们在头部添加了三个 `router-link` 代表我们的头部导航。

            `router-link` 和 `a` 标签类似，只不过 Vue 为它添加一些额外的优化逻辑。
      - file: src/components/HelloWorld.vue
        display: false
      - file: src/pages/Admin.vue
        display: true
        explain:
          pre: >-
            ### 创建后台管理页面


            接着我们编写 `Admin.vue` 组件，但这里稍微有点不同，即我们在 `src/pages` 下创建 `Admin.vue`
            组件，因为对于页面级组件，我们倾向于将其放到一个特殊 `pages` 文件夹，这样方便组织项目。其代码如下：
          post: 可以看到这个页面内容和我们之前的 `Home.vue` 内容相似。
      - file: src/pages/Cart.vue
        display: true
        explain:
          pre: |-
            ### 创建购物车页面

            然后是我们的购物车页面 `Cart.vue`，代码如下：
          post: 可以看到这个页面内容和我们之前的 `Home.vue` 内容相似。
      - file: src/pages/Home.vue
        display: false
        explain:
          pre: >-
            最后是我们的商品详情列表 `Home.vue`，只不过这一次我们需要将它从 `src/components/Home.vue` 移动到
            `src/pages/Home.vue` 下。
      - file: src/router/index.js
        display: true
        explain:
          pre: >-
            ### 将新页面导入路由


            最后，我们把上一步中创建的 `Home.vue` 移到 `src/pages` 目录中，并在路由文件
            `src/routes/index.js` 中导入这三个页面，代码如下：
          post: ""
    explain:
      pre: |-
        一个经典的电商应用通常包括如下部分：

        - 商品展示列表 （`Home.vue`）
        - 商品详情（`Detail.vue`）
        - 购物车（`Cart.vue`）

        这里因为我们追求简单，也将商品的后台管理页面 （`Admin.vue`）放入了项目中。

        现在我们先来实现商品展示列表、购物车和后台管理页面的模板内容。因为商品详情页后面将会使用组件进行复用，所以这里我们暂时先不创建。
      post: |-
        保存代码，然后打开浏览器，我们可以看到下面的效果：

        ![](tuture-assets/router-demo.gif)

        你可以点击头部的三个导航链接，下面的标题内容会随着点击的链接变化。恭喜你，你已经成功地实现了一个基于 Vue 的多页面网站了！
  - name: 使用嵌套路由和动态路由合理组织页面
    commit: aca2bb6
    diff:
      - file: src/router/index.js
        display: true
        explain:
          pre: >-
            ### 升级路由


            在我们的商城项目中，后台管理页 `Admin` 涉及到很多操作页面，比如：


            - `/create` 创建新的商品

            - `/edit` 编辑商品信息


            让我们通过**嵌套路由**的方式将它们组织在一起。首先在路由文件 `src/router/index.js`
            中声明后台管理所有用到的页面组件（我们马上就会去实现它们）：
          post: >-
            嵌套路由的用法就是给需要归为一类的页面设置一个入口页面，然后把这一类页面都放到这个路由页面路由定义的 `children` 字段数组中。


            通过上面的代码我们可以看到，`Admin` 类别下有四个组件，`Index` 是我们 `Admin` 类别的入口组件，也是作为
            `path = /admin` 的渲染组件，然后其他组件就放到 `path = /admin` 这个路由定义的 `children`
            数组里，其定义和其他父级一致。


            这样的嵌套写法带来了两个好处：


            - 很清晰的组织了一类页面，方便阅读。

            - 在定义路由的 `path` 的时候，复用了父级的 `path`，即现在我们的 `New`
            这个路由，它在浏览器中访问的路径为：`'/admin' +  'new'`，如果我们统一放到 `routes`
            数组的第一级定义，那么后面的 `Products` 和 `Edit` 的 `path` 都要带上诸如 `/admin` 和
            `/admin/edit/:id` 这样长长的路径，显得特别复杂。


            这里还有一个改变就是，我们发现 `Edit` 这个路由的 `path` 有点不太一样，它有个特殊的标志
            `edit/:id`，这种写法被称为**动态路由**，即 `:id` 会匹配任意字符串，所以用户访问
            `/admin/edit/<any-string>` 都会激活 `Edit` 路由，从而渲染 `Edit.vue` 组件。
      - file: src/pages/admin/Index.vue
        display: true
        explain:
          pre: |-
            ### 创建 Admin 的子页面

            首先创建 `Index.vue` 入口组件，代码如下：
          post: >-
            可以看到，它作为嵌套路由的入口级组件，和我们之前在 `App.vue` 里面看到的样子类似，在其中会有 `router-link`
            导向更深层级的路由.


            `router-view` 用于渲染子路由组件，比如我们此时访问 `/admin/new` 页面，那么 `router-view`
            部分会被替换成 `New.vue` 组件的内容，因为我们在之前的嵌套路由定义中  `path` 为 `new` 的渲染组件为
            `New.vue`。
      - file: src/pages/admin/Edit.vue
        display: true
        explain:
          pre: 创建 `src/pages/admin/Edit.vue` 组件，代码如下：
          post: >-
            可以看到，当用户访问 `/admin/edit/:id`，会激活渲染 `Edit.vue` 组件，我们可以通过
            `$route.params.id` 的方式获取用户输入的路径 `:id` 部分。比如我们在浏览器中输入
            `/admin/edit/52tuture`，那么浏览器将会以 `h1` 的形式打出 `"This is
            Admin/Edit/52tuture"`。



            ::: info

            **提示**


            `$route` 这个变量是 Vue 在运行时为我们自动插入到所有组件属性中的，所有我们不用手动去管理它。

            :::
      - file: src/pages/admin/New.vue
        display: true
        explain:
          pre: 创建 `src/pages/admin/New.vue`，代码如下：
          post: ""
      - file: src/pages/admin/Products.vue
        display: true
        explain:
          pre: 创建 `src/pages/admin/Products.vue` ，代码如下：
      - file: src/pages/Admin.vue
        display: false
    explain:
      pre: >-
        随着页面的增多，如果我们把所有的页面都塞到一个 `routes` 数组里面会显得很乱，你无法确定哪些页面存在关系。还好 `vue-router`
        提供了嵌套路由的功能，让我们能把相关联的页面组织在一起。
      post: >-
        保存我们编写的内容，打开浏览器，我们可以看到如下内容：


        ![](tuture-assets/router-demo2.gif)


        至此，我们的迷你全栈电商应用的第一部分就完成了，在接下来的教程中，我们将用 Express 和 MongoDB 搭建这个电商应用的后端
        API，不见不散哦~
  - name: 用模板语法和双向绑定实现数据的添加
    commit: b3771b6
    diff:
      - file: package-lock.json
      - file: package.json
        display: false
      - file: src/components/products/ProductForm.vue
        display: true
        explain:
          pre: >-
            ### 动手实现


            讲解完 Vue 的基础知识之后，我们马上将所有的知识运用起来，来编写我们的 `ProductForm.vue`
            组件，它用来添加或者更新商品的信息。


            我们在 `src/components` 中创建 `ProductForm.vue` 表单组件，代码如下：
          post: >-
            这段代码看起来很长，你可能被吓到了，让我们一段一段来拆解它。


            首先它由两个部分组成，分别是 `script` 和 `template` ，我们先来看一看 `script` 部分。


            这里我们的 `props` 接收来自父组件的三个参数：`model`、`manufacturers`、`isEditing`。


            然后我们定义了一个 `saveProduct` 方法，就是当用户填写完商品信息的表单之后，点击提交按钮会触发的方法，在
            `saveProduct` 内部，我们调用了父组件的 `save-product` 方法，并把修改后的 `this.model`
            变量内容传给父组件。所以这里我们还可以看到，`methods`
            不仅可以使得数据可以双向流动，而且还可以在子组件反向操作父组件的内容，使得数据还可以上下流动。


            接下来我们再来谈一谈 `template` 里面发生的事情。


            可以看到 `template` 里面就是一个表单，这个表单定义了一个 `submit` 事件，并且使用了禁用默认事件的简洁写法
            `@submit.prevent`。 这个事件触发会调用我们上面提到的 `saveProduct` 方法。


            接着我们定义了好几个 `class` 为 `form-group`
            的元素块，每个块代表我们创建商品所需要填写的相关信息，我们注意到，前两个 `form-group` 使用 `v-model`
            双向绑定语法分别绑定了 `model` 的 `name` 和 `price` 属性。


            第三个 `form-group` 我们首先在 `select` 标签中使用 `v-model` 双向绑定了
            `model.manufacturer`，表示我们在视图里面进行选择时，会修改对应的 `model.manufacturer` 属性。


            接着我们对 `manufacturers` 进行循环遍历，构造多个 `option` 标签选项，然后使用了属性绑定语法的简洁写法绑定了
            `option` 的 `value` 和 `selected` 属性，`value` 属性赋值为
            `manufacturer._id`，`selected` 属性会进行判断，`model.manufacturer &&
            model.manufacturer._id` 表示首先检验 `model` 的 `manufacturer`
            属性是否存在，正常情况下它应该是一个对象，如果 `model.manufacturer` 属性存在，那么获取
            `model.manufacturer._id`，然后用获取到的这个  `model.manufacturer._id` 和
            `manufacturer._id` 进行比较，如果一致，那么 `selected` 属性为 `true`，不一致就为 `false`。


            然后我们来看一下第二段 `form-group`，也就是第 4-6 个 `form-group`。


            可以看到前两个 `form-group` 使用 `v-model` 双向绑定了 `model.image` 和
            `model.description ` ，表示当用户


            最后一个 `form-group` 我们使用了条件选择语法，判断 `isEditing`，来渲染不同的按钮文案。
      - file: src/main.js
        display: false
      - file: src/pages/admin/New.vue
        display: true
        explain:
          pre: |-
            ### Vue 组件组合

            编写完上面的表单之后，我们在 `New.vue` 中引入我们创建的表单组件：
          post: >-
            当一个组件要在模板语法中使用另外一个组件时，需要申明此组件，即在组件的 `components`
            属性中申明要使用的组件，比如我们上面使用名为 `'product-form'` 的名称来申明使用 `ProductForm`
            组件，这样在 `template` 中我们就可以以 `<product-form />` 形式使用导入的表单组件。


            同时我们在组件的 `data` 中定义了 `model` 和 `manufacturers` 以及在 `methods` 中定义了
            `addProduct` 方法，并将它们以属性绑定
            `:model="model"`、`:manufacturers="manufacturers"` 和事件绑定
            `@save-product="saveProduct"` 的方式传递给表单组件。
    explain:
      pre: >+
        当我们完成了商城应用的基本页面框架之后，我们就可以开始考虑具体页面的内容了。首先我们要考虑的就是数据的来源，即添加商品页面。有了添加商品的入口，我们就可以展示商品列表，获取商品详情，甚至是修改商品信息。


        不过在此之前，我们打算先复习一下 Vue 的一些重要知识点。如果你已经很熟悉了，可以直接跳到下面实现 ProductForm.vue
        的代码部分。


        ### Vue 实例：Props 和 Methods


        #### Props


        `props` 是 Vue 进行组件之间传参的形式。比如我们有如两个组件 `New.vue` 和 `ProductForm.vue`，在
        `New.vue` 组件中需要使用到 `ProductForm.vue` 组件。其中 `New.vue`
        组件是用来创建商品的，它的代码大致是这样的：


        ```JavaScript

        import ProductForm from '@/components/ProductForm.vue';


        <ProductForm :manufacturers="manufacturers" />

        ```


        它需要给 `ProductForm.vue` 组件传递一个 `manufacturers`
        属性，以确保我们在创建商品时，可以选择这个商品所属的制造商，接着我们就可以在 `ProductForm.vue` 中的 `props`
        中取到这个 `manufacturers` 属性。`ProductForm.vue` 的代码大致是这样的：


        ```JavaScript

        <template>

        <!-- 模板部分 -->

        </template>


        <script>

        export default {
          props: ['manufacturers'],
        }

        </script>

        ```


        可以看到，我们在 `ProductForm.vue` 的 `script` 部分导出的对象里面找到 `props` 属性，然后取到
        `manufacturers` 属性。


        #### Methods


        然后是 `methods` ，`methods` 是用来定义在组件中会用到的一些方法，如果说我们前面提到的 `data`
        ，是从数据从逻辑层（JS）向视图层（Html）流动的话，那么这里的 `methods` 就是视图层触发事件，如
        click、submit等，反过来修改逻辑层的数据的方法，`methods` 使得数据可以双向流动。


        让我们在完善一下我们的 `ProductForm.vue` ，看一下 Methods 在 Vue 中是如何运作的：


        ```JavaScript

        <template>

        <form @submit.prevent="saveProduct">

        <!-- 其他表单，如 input 等 -->


        <div class="form-group new-button">
          <button class="button">Add Product</button>
        </div>

        </form>

        </template>


        <script>

        export default {
          data: { isSaved: false },
          props: ['manufacturers'],
          methods: {
            saveProduct() {
               this.isSaved = true;

              // 完成一些保存创建商品的逻辑 ...
            }
          }
        }

        </script>

        ```


        可以看到，我们可以通过在 `template` （视图层）通过点击提交按钮，发起表单提交事件，进而调用在 `script` 中定义在
        `methods` 属性中的 `saveProduct` 方法，这个方法可以进一步修改定义在定义在 `data` 属性中的数据；甚至如果父组件
        `New.vue` 传递了方法（以 `props` 的形式）给 `ProductForm.vue` 组件，我们可在 `saveProduct`
        调用这个传递下来的方法，进而可以影响到父组件 `New.vue` 中的数据。我们将在后面的正式实现 `ProductForm` 组件时讲解到它。


        ### 模板语法：v-on


        接下来我们再来谈一谈 v-bind 和 v-on 。


        在 Vue 中，我们通过 `v-on` 的方式接管了之前在 HTML 中 `onEvent` ：


        比如之前我们在 HTML 中的写法是这样的：


        ```HTML

        <div onclick="alert('I love tuture')">

        Hello Tuture

        </div>

        ```


        现在在 Vue 的模板语法中我们需要写出这样：


        ```HTML

        <div v-on:click="alert('I love tuture')">

        Hello Tuture

        </div>

        ```


        类似的 `onEvent` 都要改成 `v-on:Event`。然后这样写显得比较冗余，所以 Vue 支持简化写法，用 `@` 替换
        `v-on:` 部分，我们就可以写出这样：


        ```HTML

        <div @click="alert('I love tuture')">

        Hello Tuture

        </div>

        ```


        调用事件之后我们一般有一些这样的操作，比如禁用浏览器默认行为，然后自己去处理事件，获取后端数据，以前我们会这样写：


        ```HTML

        <div onclick="saveProduct()">

        Hello Tuture


        <script>

        var saveProduct = function (e) {
          e.preventDefault();

          // do something you like
        }

        </script>

        ```


        但是这样写又显得特别繁琐了，Vue 也觉得这样可以简化，于是我们直接将这些禁止默认行为的调用作为绑定事件的属性来进行处理，于是乎在 Vue
        中我们可以写出这样：


        ```JavaScript

        <template>
          <div @click.prevent="saveProduct">
          Hello Tuture
          </div>
        </template>


        <script>

        export default {
          methods: {
            saveProduct() {
              // do something you like
            }
          }
        }

        </script>

        ```


        不知道看了上面的长文，你有没有一点晕，不管你晕不晕，我是得喝口水缓一下。 - v -


        ### 模板语法：v-bind


        我们已经看到在 Vue 模板中我们可以使用如下的功能：


        - `{{}}` 插值语法将 `data` 渲染到 HTML 元素内容中

        - `v-on` 或者简化写法 `@` ，等用来取代 HTML 的事件绑定


        有了上面的功能，我们可以让 HTML 动起来了，但是还缺点什么，比如我们的 HTML 属性，如 `id`、`class`
        等，是不是也能动态的获取变化值，你还别说，还真的可以，Vue 模板语法为我们提供了 `v-bind` 用于动态绑定属性值，我们来看个例子：


        ```JavaScript

        <template>

        <option v-bind:id="_id"  v-bind:value="value" />

        </template>


        <script>

        export default {
          data: { _id: '1', value: "Xiaomi" },
        }

        </script>

        ```

        可以看到，我们在 `script` 中导出的对象属性 `data` 中，定义了 `_id` 和 `value` 值，然后我们通过在
        `<template>` 模板中使用 `v-bind` 语法动态的给 `option` 标签的 `id` 和 `value`
        属性赋值，最后的结果看起来是这样的：


        ```JavaScript

        <option id="1" value="Xiaomi" />

        ```


        当然，当需要绑定的属性多了，每次都写 `v-bind` 显得相当繁琐，所以 Vue 为我们提供了 `v-bind` 的简洁语法
        `:`，即我们之前的绑定语法从 `v-bind:id="_id"` 变成了 `:id="_id"`。


        上面的代码用简洁语法改写如下：


        ```JavaScript

        <template>

        <option :id="_id"  :value="value" />

        </template>


        <script>

        export default {
          data: { _id: '1', value: "Xiaomi" },
        }

        </script>

        ```


        ### 模板语法：v-model 双向绑定


        前面我们提到通过 `{{}}` 插值语法渲染来自 `data` 的数据实现了逻辑层向视图层的数据流动，通过 `methods`
        在视图层操作逻辑层的数据，实现了视图层的数据向逻辑层的数据流动，从而达到了双向绑定，当我们的应用越来越复杂，我们会发现这样的数据双向流动会越来越频繁，而且粒度也会大小不一，有很多单纯修改某个值的方法调用就会显得特别繁杂，因此
        Vue 通过提供 `v-model` 进行了视图层和逻辑层的双向绑定，让我们来看个例子：


        ```HTML

        <template>

        <!-- 其他代码 ... -->

        <input
          type="text"
          placeholder="Name"
          v-model="name"
        />

        <!-- 其他代码 ... -->

        </template>


        <script>

        export default {
          data: { name: 'ProductForm' },
        }

        </script>

        ```


        这里我们通过申明 `v-mode` 将此 input 的值和我们在 Vue 实例中的 `model` 的 `name` 属性进行了双向绑定，即当
        data 中的 `name` 发生变化，input 的值也会跟着变化，当 input 的值发生变化，我们 data 中的 `name`
        的值也会被修改，这一切都是自动发生的，不需要我们额外的添加 `methods` 里面的方法调用来手动修改。


        ### 模板语法：循环


        好了，Vue 替我们接管了 HTML 元素属性值、事件处理、元素内容，这些都还只属于原来 HTML 的部分，它更强大的一点就是将 JS
        的功能引入了模板语法中，使得我们可以实现类似循环，条件选择操作等功能。


        接下来我们先来看一下 Vue 为我们提供的 “循环” 模板语法， 它使得我们可以快速渲染大量具有相似结构的数据，比如渲染一个数组的数据，生成一个
        HTML 元素列表，这在我们平时看到的新闻 App
        里面很常见，我们浏览新闻时，发现其实每条新闻的结构都很相似，并且有很多条新闻（可能多大几百上千条），如果每一条我们都手动写 HTML
        代码的话，无疑显得相当繁琐，并且数据一多，我们手动就显得无能为力了，而 Vue 为我们提供的 “循环”
        模板语法，使得我们可以通过非常简单的写法就可以渲染大量数据，我们来看个例子：


        ```HTML

        <!--

        manufacturers = [
          { _id: 1, name: 'Apple' },
          { _id: 2, name: 'Xiaomi' }
        ]


        model = { _id: 1, name: 'Apple' }

         -->
        <template v-for="manufacturer in manufacturers">
          <option :value="manufacturer._id" :selected="manufacturer._id == model._id">{{manufacturer.name}}</option>
        </template>

        ```


        最后渲染的结果为：


        ```HTML

        <option value="1" selected="true">Apple</option>

        <option value="2" selected="false">Xiaomi</option>

        ```


        注意到，如果我们在写 “循环” 语法时，使用了一个额外的标签 `template` 来包裹我们需要渲染的 HTML 元素，这也是 Vue
        推荐的写法；我们在 `template` 标签的属性上添加 `v-for` 然后给它赋值 `"manufacturer in
        manufacturers"`，通过这样的形式进行列表数据的遍历，每次从 `manufacturers` 中取一个元素，并赋值给
        `manufacturer` ，然后我们就可以在 `option`  标签中使用 `manufacturer` 和我们定义的 `model`
        进行比较。


        因为我们的 `model._id` 为 `1`，它和 `manufacturers` 数组的第一项元素的 `_id` 一致，所以我们返回的两个
        `option` 标签，第一个 `selected` 属性为 `true`，第二个为 `false`。


        ### 模板语法：条件选择


        上面的讲述了循环是如何在 Vue 中使用的，下面我们来看一看条件语法是如何在 Vue 中使用的：


        ```JavaScript

        <span v-if="isEditing">Update Product</span>

        <span v-else>Add Product</span>


        <script>

        export default {
          data: { isEditing: false },
        }

        </script>

        ```


        我们可以看到，通过在标签上加 `v-if` 并后面紧跟加 `v-else` 的标签我们可以判断最终渲染的标签，比如我们这里
        `isEditing` 为 `false`，那么我们最终渲染的结果为：


        ```JavaScript

        <span>Add Product</span>

        ```


        当然你可以添加诸如 `v-else-if` 的标签来做多重判断。



        ::: info

        **提示**


        这里的带 `v-if`、`v-else-if` 或 `v-else`
        的标签需要依次紧跟着前面的标签，不能在这些带条件属性的标签中插入其他不带条件的标签，比如下面这段代码就是错误的：


        ```html

        <span v-if="isEditing">Update Product</span>

        <span>我是错误插入的标签</span>

        <span v-else>Add Product</span>


        <script>

        export default {
          data: { isEditing: false },
        }

        </script>

        ```


        :::




      post: >-
        当保存上面编写的代码之后，我们打开浏览器，点击导航链接 `Admin`，然后点击子导航链接 `New Products`，切换到我们的
        `New.vue` 添加商品页面，我们可以看到如下的效果：


        ![New.vue](./tuture-assets/2a340eeb04a07c1aae2bcd0387931c52)


        ### 小结


        到现在为止，我们已经了解了 Vue 的基础部分，包括：


        - 用路由进行多页面的跳转和导航

        - 用嵌套路由和动态路由合理组织页面

        - Vue 组件和 Vue 实例

        - Vue 模板语法


        掌握了这些知识后，我们已经可以实现很多前端的功能，完成一些简单的 Vue
        应用了。但是如果要完成数据逻辑复杂的大型应用，目前学到的知识就力不从心了。但是没关系，我们将在后面学习 Vuex 这一前端状态管理工具，有了
        Vuex 的加持，我们就能用 Vuex 写出任意复杂的应用了。


        但是请先别着急，让我们先做点别的事，比如，干掉我们硬编码的假数据，试试真实的数据，并且还能持久化保存我们的数据，这就需要后端的介入了，在下一节中，我会带你手把手实现一个
        Node.js 后端 API 应用，有了它，我们的前端就真正的活起来了，数据也可以持久保存了！
  - name: 使用 Vuex 进行状态管理
    commit: 4bc407e
    diff:
      - file: package-lock.json
      - file: package.json
        display: true
        explain:
          pre: |-
            ### 安装依赖

            首先我们打开命令行，进入项目目录，执行如下命令安装 Vuex:

            ```shell
            npm install vuex
            ```

            当安装完 `vuex` 之后，我们的 `package.json` 文件的 `dependencies` 多个一个 `vuex`：
      - file: src/store/index.js
        display: true
        explain:
          pre: >-
            ### 创建 Vuex Store


            Vuex 是一个前端状态管理工具，它致力于接管 Vue 的状态，使得 Vue 专心做好渲染页面的事情；它类似在前端建立了一个
            “数据库”，然后将所有的前端状态都保存在这个 “数据库” 里面。这个 “数据库” 其实就是一个普通的 JavaScript 对象。


            好了，讲述了 Vuex 是干什么的了，我们来看一下如何在 Vue 中运用 Vuex。Vuex 建立的这个 “数据库” 一般用术语
            `store` 来表示，通常我们建立一个单独的 `store` 文件夹，用于保存和 `store` 有关的内容，我们建立在 `src`
            文件夹下建立 `store` 文件夹，然后在里面创建 `index.js` 文件，在里面编写如下内容：
          post: >-
            上面的代码可以分为三部分。


            - 首先我们导入 `vue` 和 `vuex` 。

            - 然后我们调用 `Vue.use` 方法，告诉 Vue 我们将使用 `vuex`，这和我们之前使用 `Vue.use(router)`
            的原理一样。

            - 最后我们导出 `Vuex.Store` 实例，并且传入了 `strict` 和 `state` 参数，这里 `strict`
            参数表示，我们必须使用 Vuex 的 Mutation 方法来改变 `state`，否则就会报错（关于 Mutation 我们将在
            “使用 Vuex 进行状态管理” 一节讲解）。而 `state` 参数用来存放我们全局的状态，比如我们这里定义了 `cart` 、
            `showLoader` 等属性都是后面我们完善迷你淘宝的内容需要的数据。
      - file: src/main.js
        display: true
        explain:
          pre: >-
            ### 将 Vuex 和 Vue 整合


            当我们创建并导出了 Vuex 的 `store` 实例之后，我们需要使用它。打开 `main.js` 文件，在开头导出我们实例化的
            `store` ，以及将 `store` 添加到 Vue 初始化的参数列表里：
          post: >-
            可以看到，在上面的文件中，我们一开头导入了我们之前在 `src/store/index.js` 里定义的 `store` 实例，接着，在
            Vue 实例初始化时，我们将这个 `store` 实例使用对象属性简洁写法添加到了参数列表里。


            当我们将 `store` 当做参数传给 Vue 进行初始化之后，Vue 就会将 Store 里面的 `state` 注入到所有的 Vue
            组件中，这样所有的 Vue 组件共享同一个全局的 `state` ，它其实就是一个 JS 对象，应用中所有状态的变化都是对
            `state` 进行操作，然后响应式的触发组件的重新渲染，所以这里的 `state` 也有 “数据的唯一真相来源” 的称谓。


            这种将状态保存到一个全局的 JavaScript 对象 -- state 中，然后所有的增、删、改、查操作都是对这个
            JavaScript
            对象进行，使得我们可以避免组件嵌套层级过深时，组件之间传递属性的复杂性，让属性的定义，获取，修改非常直观，方便开发大型应用和团队协作。
      - file: src/pages/admin/Products.vue
        display: true
        explain:
          pre: >-
            ### 查看 Vuex 整合后的效果


            在将 Vuex 和 Vue 整合好之后，我们马上来看一下 Vuex
            带来的效果，不过在此之前我们先来讲一讲什么是计算属性（`computed`）。


            #### 计算属性（Computed）


            首先我们新增了 `script` 部分，然后在导出的对象里面增加了一个 `computed`
            属性，这个属性里面的内容用于申明一些可能要在 `template` 里面使用的复杂表达式。我们来看一个例子来讲解一下
            `computed` 属性：


            我们在模板中可能要获取一个多级嵌套对象里面的某个数据，或者要渲染的数据需要经过复杂的表达式来计算，比如我们要渲染这样一个数据
            `obj1.obj2.obj3.a + obj1.obj4.b`，写在模板里就是这样的：


            ```HTML

            <template>

            <div>
              {{ obj1.obj2.obj3.a + obj1.obj4.b }}
            </div>

            </template>

            <script>

            export default {
              data: {
                obj1: {
                  obj2: {
                    obj3: {
                      a
                    }
                  },
                  obj4: {
                    b
                  }
                }
              }
            }

            </script>

            ```


            可以看到，我们一眼看上去，这个模板里面有这样一个复杂的表达式，很不容易反应出来它到底要渲染什么，这样代码的可读性就很差，所以 Vue
            为我们提供了计算属性（ `computed`
            ），用于用简单的变量来代表复杂的表达式结果，进而简化模板中插值的内容，让我们的模板看起来可读性更好，上面的代码使用计算属性来改进会变成下面这样：



            ```JavaScript

            <template>

            <div>
              {{ addResult }}
            </div>

            </template>


            <script>

            export default {
              data: {
                obj1: {
                  obj2: {
                    obj3: {
                      a
                    }
                  },
                  obj4: {
                    b
                  }
                }
              },
              computed: {
                addResult() {
                  return this.obj1.obj2.obj3.a + this.obj1.obj4.b
                }
              }
            }

            </script>

            ```


            可以看到，当我们使用了计算属性 `addResult` 之后，我们在模板里面的写法就简化了很多，而且一目了然我们是渲染了什么。


            了解了计算属性之后，我们打开 `src/pages/admin/Products.vue`，对内容作出如下改进以查看 Vuex 和
            Vue 整合之后的效果：
          post: >+
            可以看到，上面的内容改进主要分为两个部分：


            - 首先我们定义了一个 `product` 计算属性，它里面返回一个从 `store` 中保存的 `state`取到的
            `products` 数组的第一个元素，注意到当我们在 “将 Vuex 和 Vue 整合” 这一小节中将 `store` 作为 Vue
            初始化实例参数，所以我们在所有的 Vue 组件中可以通过 `this.$store.state` 的形式取到 Vuex Store
            中保存的 `state`。

            - 接着我们使用了计算属性 `product`，取到了它的 `name` 属性进行渲染。



    explain:
      pre: >-
        我们之前讲解了 Vue
        的基础部分，你可以做一些比较简单的页面，但是针对复杂的应用，比如组件嵌套超过3级，我们前面讲解的知识处理起来就很费力了，还好 Vue
        社区为我们打造了状态管理容器 Vuex，用来处理大型复杂的应用。
      post: >-
        ### 小结


        在这一小节中，我们学习了如何将 Vuex 整合进 Vue 中：


        - 首先我们安装了 `vuex` 依赖

        - 接着我们在 `src` 下面创建了 `store` 文件夹，用于保存 Vuex 相关的内容，在 `store` 文件下之下，我们创建了
        `index.js` 文件，在里面实例化了 `Vuex.Store` 类，我们在实例化的过程中传递了两个参数：`strict` 和
        `state`，`strict` 表示我们告诉 Vue，只允许 `Mutation` 方法才能修改
        `state`，确保修改状态的唯一性；`state` 是我们整个应用的状态，整个应用的状态都是从它获取，整个应用状态的改变都是修改它，所以这个
        `state` 也有 “数据的唯一真相来源” 的称谓。

        - 然后我们通过在 `main.js` 里面导入实例化的 `store`，将它加入到初始化 Vue 实例的参数列表中，实现了 Vuex 和
        Vue 的整合。

        - 最后我们讲解了计算属性，然后通过在计算属性中获取 `this.$store.state` 的方式展示了 Vuex 整合之后的效果。


        好了，我们已经整合了 Vuex，并在 Vue 组件中获取了保存在 Vuex Store
        中的状态（state），接下来我们来看一下如何修改这个状态。
  - name: 使用 Mutation 修改本地状态
    commit: 3b00854
    diff:
      - file: src/store/index.js
        display: true
        explain:
          post: >-
            可以看到上面的代码改进氛围两个部分：


            - 首先我们扩充了 `state` 中的 `products`
            属性，在里面保存一开始我们的迷你电商平台的初始数据，这里我们是硬编码到代码中的，在下一节 “使用 Action
            获取远程数据”中，我们将动态获取后端服务器的数据。

            - 接着我们在 Vuex.Store 实例化的参数中添加了一个 `mutations` 属性，在里面定义了两个方法
            `ADD_TO_CART` 和
            `REMOVE_FROM_CART`，分别代表响应从视图层发起的对应将商品添加至购物车和从购物车移除商品的动作。
      - file: src/components/products/ProductList.vue
        display: true
      - file: src/pages/Home.vue
        display: true
      - file: src/pages/Cart.vue
        display: true
      - file: src/pages/admin/New.vue
        display: false
    explain:
      pre: >-
        我们在上一节中定义了 Vuex Store，并在里面保存了全局的状态 `state`，这一节我们来学习如何修改这一状态。


        Vuex 为我们提供了 `Mutation`，它是修改 Vuex Store 中保存状态的唯一手段。


        Mutation 是定义在 Vuex Store 的 `mutation` 属性中的一些列方法，用于响应从 Vue
        视图层发出来的事件或动作，一个 Mutation 是形如 `(state, payload) => newState` 的方法：


        ```JavaScript

        ACTION_NAME(state, payload) {
          // 对 `state` 进行操作以返回新的 `state`
          return newState;
        }

        ```


        其中方法名 `ACTION_NAME` 用于对应从视图层里面发出的事件或动作的名称，方法接收两个参数 `state` 和
        `payload`，`state` 就是我们 Vuex Store 中保存的 `state`，`payload`
        是被响应的那个事件或动作携带的参数，然后我们通过 `payload` 的参数来操作现有的 `state`，返回新的
        `state`，通过这样的方式，我们就可以响应修改 Vuex Store 中保存的全局状态。


        了解了 Mutation 的概念之后，我们马上来看一下如何运用它。


        我们打开 `src/store/index.js` 文件，修改其中的 `state` 并加上 `mutations` 如下：
  - name: 使用 Action 获取远程数据
    commit: b14d923
    diff:
      - file: package-lock.json
      - file: package.json
        display: true
      - file: src/components/products/ProductList.vue
        display: true
      - file: src/pages/Cart.vue
        display: true
      - file: src/store/index.js
        display: true
  - name: 使用 Vue 组件简化页面逻辑
    commit: 6f96d15
    diff:
      - file: src/components/products/ProductButton.vue
        display: true
      - file: src/components/products/ProductItem.vue
        display: true
      - file: src/components/products/ProductList.vue
        display: true
      - file: src/pages/Cart.vue
        display: true
  - name: 使用 Vuex Getters 复用本地数据获取逻辑
    commit: c999bac
    diff:
      - file: src/components/products/ProductDetail.vue
        display: true
      - file: src/components/products/ProductItem.vue
        display: true
      - file: src/components/products/ProductList.vue
        display: true
      - file: src/pages/Cart.vue
        display: true
      - file: src/pages/Detail.vue
        display: true
      - file: src/pages/admin/Products.vue
        display: true
      - file: src/router/index.js
        display: true
      - file: src/store/index.js
        display: true
  - name: 抽出 Getters 和 Mutations 逻辑
    commit: 4cc00dd
    diff:
      - file: src/pages/admin/Index.vue
        display: true
      - file: src/pages/admin/Manufacturers.vue
        display: true
      - file: src/pages/admin/Products.vue
        display: true
      - file: src/router/index.js
        display: true
      - file: src/store/getters.js
        display: true
      - file: src/store/index.js
        display: true
      - file: src/store/mutations.js
        display: true
  - name: 抽出 Actions 逻辑
    commit: 1a54d5e
    diff:
      - file: src/components/products/ProductForm.vue
        display: true
      - file: src/pages/admin/Edit.vue
        display: true
      - file: src/pages/admin/New.vue
        display: true
      - file: src/store/actions.js
        display: true
      - file: src/store/index.js
        display: true
      - file: src/store/mutations.js
        display: true
  - name: 干掉 mutation-types 硬编码
    commit: 1cf95ac
    diff:
      - file: src/components/ManufacturerForm.vue
        display: true
      - file: src/pages/admin/EditManufacturers.vue
        display: true
      - file: src/pages/admin/Index.vue
        display: true
      - file: src/pages/admin/Manufacturers.vue
        display: true
      - file: src/pages/admin/NewManufacturers.vue
        display: true
      - file: src/pages/admin/Products.vue
        display: true
      - file: src/router/index.js
        display: true
      - file: src/store/actions.js
        display: true
      - file: src/store/getters.js
        display: true
      - file: src/store/index.js
        display: true
      - file: src/store/mutation-types.js
        display: true
      - file: src/store/mutations.js
        display: true
  - name: 大量改进最后一步内容
    commit: 3d2a6b7
    diff:
      - file: build/webpack.base.conf.js
        display: true
      - file: src/pages/Home.vue
        display: true
      - file: tuture-assets/142621576840065_.pic.jpg
        display: true
      - file: tuture.yml
description: >-
  Vue 是尤雨溪在2014年创建的一个前端框架，目前 Github Star 数高达150K，是 Star 数最高的前端项目，并且 Vue
  有着极为活跃的社区生态以及专职团队进行维护以确保项目可以健康长久的发展。


  目前中国很多互联网公司前端程序员的招聘要求都要求程序员掌握 Vue，像滴滴、美团、饿了么等大厂也在重度使用 Vue 进行开发，并且有着像 Element
  、mpvue、iView 这样优秀的基于 Vue 的开源项目存在，所以学习 Vue 是一个不错的投资，当你学会
  Vue，就可以快速开发项目，这样不仅可以接外包挣外快，而且当有了一定的项目经验，还可以在一线互联网大厂找到一份不错的工作。


  看到这里你心动了嘛？心动不如行动！而最幸运的是，本教程将会一步一步带你以实战的方式实现一个 real-life
  （真实世界中的运行的）项目，并在实战的过程中，了解 Vue 的全貌，现在就打开电脑，跟随者我的脚步，这一次彻底掌握 Vue 开发！
